# Script de test pour le syst√®me d'authentification
# Teste les diff√©rents endpoints et fonctionnalit√©s

$baseUrl = "http://localhost:8080"
$headers = @{
    "Content-Type" = "application/json"
}

Write-Host "üîê Test du syst√®me d'authentification ProxmoxDash" -ForegroundColor Cyan
Write-Host "=" * 50

# Test 1: V√©rifier que le serveur r√©pond
Write-Host "`n1Ô∏è‚É£  Test de sant√© du serveur..." -ForegroundColor Yellow
try {
    $healthResponse = Invoke-RestMethod -Uri "$baseUrl/api/health" -Method GET
    Write-Host "‚úÖ Serveur en ligne: $($healthResponse.status)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur: Serveur non accessible" -ForegroundColor Red
    Write-Host "   Assurez-vous que le backend est d√©marr√© avec: go run ./cmd/main.go" -ForegroundColor Yellow
    exit 1
}

# Test 2: Tentative de connexion avec un utilisateur invalide
Write-Host "`n2Ô∏è‚É£  Test de connexion avec des identifiants invalides..." -ForegroundColor Yellow
try {
    $loginData = @{
        username = "invalid"
        password = "invalid"
    } | ConvertTo-Json

    $response = Invoke-RestMethod -Uri "$baseUrl/api/auth/login" -Method POST -Body $loginData -Headers $headers
    Write-Host "‚ùå Erreur: Connexion r√©ussie avec des identifiants invalides" -ForegroundColor Red
} catch {
    if ($_.Exception.Response.StatusCode -eq 401) {
        Write-Host "‚úÖ Connexion refus√©e comme attendu" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur inattendue: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Test 3: Connexion avec l'utilisateur admin
Write-Host "`n3Ô∏è‚É£  Test de connexion avec l'utilisateur admin..." -ForegroundColor Yellow
try {
    $loginData = @{
        username = "admin"
        password = "admin123"
    } | ConvertTo-Json

    $loginResponse = Invoke-RestMethod -Uri "$baseUrl/api/auth/login" -Method POST -Body $loginData -Headers $headers
    $adminToken = $loginResponse.token
    $adminUser = $loginResponse.user

    Write-Host "‚úÖ Connexion admin r√©ussie" -ForegroundColor Green
    Write-Host "   Utilisateur: $($adminUser.username)" -ForegroundColor Cyan
    Write-Host "   R√¥le: $($adminUser.role)" -ForegroundColor Cyan
    Write-Host "   Token: $($adminToken.Substring(0, 20))..." -ForegroundColor Cyan
} catch {
    Write-Host "‚ùå Erreur de connexion admin: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Test 4: Acc√®s aux informations utilisateur
Write-Host "`n4Ô∏è‚É£  Test d'acc√®s aux informations utilisateur..." -ForegroundColor Yellow
try {
    $authHeaders = @{
        "Content-Type" = "application/json"
        "Authorization" = "Bearer $adminToken"
    }

    $meResponse = Invoke-RestMethod -Uri "$baseUrl/api/auth/me" -Method GET -Headers $authHeaders
    Write-Host "‚úÖ Informations utilisateur r√©cup√©r√©es" -ForegroundColor Green
    Write-Host "   ID: $($meResponse.id)" -ForegroundColor Cyan
    Write-Host "   Username: $($meResponse.username)" -ForegroundColor Cyan
    Write-Host "   Email: $($meResponse.email)" -ForegroundColor Cyan
} catch {
    Write-Host "‚ùå Erreur d'acc√®s aux informations: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 5: Liste des utilisateurs (admin seulement)
Write-Host "`n5Ô∏è‚É£  Test de liste des utilisateurs (admin)..." -ForegroundColor Yellow
try {
    $usersResponse = Invoke-RestMethod -Uri "$baseUrl/api/auth/users" -Method GET -Headers $authHeaders
    Write-Host "‚úÖ Liste des utilisateurs r√©cup√©r√©e" -ForegroundColor Green
    Write-Host "   Nombre d'utilisateurs: $($usersResponse.Count)" -ForegroundColor Cyan

    foreach ($user in $usersResponse) {
        $status = if ($user.active) { "Actif" } else { "Inactif" }
        Write-Host "   - $($user.username) ($($user.role)) - $status" -ForegroundColor Cyan
    }
} catch {
    Write-Host "‚ùå Erreur de r√©cup√©ration des utilisateurs: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 6: Connexion avec l'utilisateur demo
Write-Host "`n6Ô∏è‚É£  Test de connexion avec l'utilisateur demo..." -ForegroundColor Yellow
try {
    $demoLoginData = @{
        username = "demo"
        password = "demo123"
    } | ConvertTo-Json

    $demoLoginResponse = Invoke-RestMethod -Uri "$baseUrl/api/auth/login" -Method POST -Body $demoLoginData -Headers $headers
    $demoToken = $demoLoginResponse.token
    $demoUser = $demoLoginResponse.user

    Write-Host "‚úÖ Connexion demo r√©ussie" -ForegroundColor Green
    Write-Host "   Utilisateur: $($demoUser.username)" -ForegroundColor Cyan
    Write-Host "   R√¥le: $($demoUser.role)" -ForegroundColor Cyan
} catch {
    Write-Host "‚ùå Erreur de connexion demo: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 7: Tentative d'acc√®s admin avec utilisateur demo
Write-Host "`n7Ô∏è‚É£  Test d'acc√®s admin avec utilisateur demo (doit √©chouer)..." -ForegroundColor Yellow
try {
    $demoAuthHeaders = @{
        "Content-Type" = "application/json"
        "Authorization" = "Bearer $demoToken"
    }

    $response = Invoke-RestMethod -Uri "$baseUrl/api/auth/users" -Method GET -Headers $demoAuthHeaders
    Write-Host "‚ùå Erreur: L'utilisateur demo a acc√®s aux fonctions admin" -ForegroundColor Red
} catch {
    if ($_.Exception.Response.StatusCode -eq 403) {
        Write-Host "‚úÖ Acc√®s refus√© comme attendu (403 Forbidden)" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur inattendue: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Test 8: Test des permissions et r√¥les
Write-Host "`n8Ô∏è‚É£  Test des permissions utilisateur..." -ForegroundColor Yellow
try {
    $permissionsResponse = Invoke-RestMethod -Uri "$baseUrl/api/auth/permissions" -Method GET -Headers $authHeaders
    Write-Host "‚úÖ Permissions r√©cup√©r√©es" -ForegroundColor Green
    Write-Host "   R√¥le: $($permissionsResponse.role)" -ForegroundColor Cyan
    Write-Host "   Nombre de permissions: $($permissionsResponse.permissions.Count)" -ForegroundColor Cyan
} catch {
    Write-Host "‚ùå Erreur de r√©cup√©ration des permissions: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 9: D√©connexion
Write-Host "`n9Ô∏è‚É£  Test de d√©connexion..." -ForegroundColor Yellow
try {
    $logoutResponse = Invoke-RestMethod -Uri "$baseUrl/api/auth/logout" -Method POST -Headers $authHeaders
    Write-Host "‚úÖ D√©connexion r√©ussie" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur de d√©connexion: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 10: Tentative d'acc√®s apr√®s d√©connexion
Write-Host "`nüîü Test d'acc√®s apr√®s d√©connexion (doit √©chouer)..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$baseUrl/api/auth/me" -Method GET -Headers $authHeaders
    Write-Host "‚ùå Erreur: Acc√®s autoris√© apr√®s d√©connexion" -ForegroundColor Red
} catch {
    if ($_.Exception.Response.StatusCode -eq 401) {
        Write-Host "‚úÖ Acc√®s refus√© apr√®s d√©connexion comme attendu" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur inattendue: $($_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host "`n" + "=" * 50
Write-Host "üéâ Tests du syst√®me d'authentification termin√©s !" -ForegroundColor Cyan
Write-Host "`nüìã R√©sum√© des comptes disponibles:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ admin / admin123 (Administrateur)" -ForegroundColor Green
Write-Host "   ‚Ä¢ demo / demo123 (Utilisateur)" -ForegroundColor Blue
Write-Host "   ‚Ä¢ viewer / viewer123 (Observateur)" -ForegroundColor Magenta
Write-Host "`nüåê Interface web: http://localhost:5173" -ForegroundColor Cyan
Write-Host "üîß API Backend: http://localhost:8080" -ForegroundColor Cyan
